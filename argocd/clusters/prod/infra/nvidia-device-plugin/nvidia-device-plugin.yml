apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nvidia-device-plugin-daemonset
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: nvidia-device-plugin-ds
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: nvidia-device-plugin-ds
    spec:
      runtimeClassName: nvidia
      priorityClassName: system-node-critical
      nodeSelector:
        gpu: "true"
      tolerations:
        - key: nvidia.com/gpu
          operator: Exists
          effect: NoSchedule
        - key: gpu
          operator: Equal
          value: "true"
          effect: NoSchedule
      containers:
        - name: nvidia-device-plugin-ctr
          image: nvcr.io/nvidia/k8s-device-plugin:v0.17.1
          imagePullPolicy: IfNotPresent
          env:
            - name: DEVICE_DISCOVERY_STRATEGY
              value: nvml
            # Try CRI first; if it still fails, switch to cdi-annotations
            - name: DEVICE_LIST_STRATEGY
              value: cdi-cri
            - name: CONTAINER_DRIVER_ROOT
              value: "/"
            - name: CDI_SPEC_DIR
              value: /var/run/cdi  
            # Write the plugin's CDI spec where containerd reads it
            - name: FAIL_ON_INIT_ERROR
              value: "false"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: { drop: ["ALL"] }
          volumeMounts:
            - name: device-plugin
              mountPath: /var/lib/kubelet/device-plugins
            - name: cdi-run
              mountPath: /var/run/cdi  
            - name: cdi
              mountPath: /etc/cdi
      volumes:
        - name: device-plugin
          hostPath:
            path: /var/lib/kubelet/device-plugins
        - name: cdi-run
          mountPath: /var/run/cdi    
        - name: cdi
          hostPath:
            path: /etc/cdi
            type: DirectoryOrCreate
 

